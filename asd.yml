Parameters:
  KeyName:
    Description: Name of an existing EC2 keyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    
Resources:
####################################################################
# VPC
  # Seoul VPC
  SeoulVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.1.0.0/16
      Tags:
        - Key: Name
          Value: Seoul-VPC
  # IDC VPC
  IDCVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.2.0.0/16
      Tags:
        - Key: Name
          Value: IDC-VPC
####################################################################
# IGW
  # Seoul IGW
  SeoulIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Seoul-IGW
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref SeoulIGW
      VpcId: !Ref SeoulVPC
  #IDC IGW
  IDCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IDC-IGW
  IGWAttachment2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IDCIGW
      VpcId: !Ref IDCVPC
####################################################################
# RT
  # Seoul Public RT
  SeoulPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeoulVPC
      Tags:
        - Key: Name
          Value: Seoul-public-RT
  # Seoul Private RT
  SeoulPrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeoulVPC
      Tags:
        - Key: Name
          Value: Seoul-private-RT-1
  # Seoul Private RT 2
  SeoulPrivateRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeoulVPC
      Tags:
        - Key: Name
          Value: Seoul-private-RT-2
  # Seoul TGW RT
  SeoulTGWRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeoulVPC
      Tags:
        - Key: Name
          Value: Seoul-TGW-RT
  # IDC Public RT
  IDCPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IDCVPC
      Tags:
        - Key: Name
          Value: IDC-public-RT
  SeoulDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref SeoulPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SeoulIGW
  # IDC Public RT Default Route
  IDCDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment2
    Properties:
      RouteTableId: !Ref IDCPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IDCIGW
####################################################################
# SN
  # Seoul Public SN      
  SeoulPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.1.1.0/24
      Tags:
        - Key: Name
          Value: Seoul-Public-SN-1
  # Seoul Public SN 2  
  SeoulPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.1.2.0/24
      Tags:
        - Key: Name
          Value: Seoul-Public-SN-2
  # Seoul Private SN
  SeoulPrivateSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: Seoul-Private-SN-1
  # Seoul Private SN 2
  SeoulPrivateSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: Seoul-Private-SN-2
  # Seoul TGW SN
  SeoulTGWSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.1.5.0/24
      Tags:
        - Key: Name
          Value: Seoul-TGW-SN-1
  # Seoul TGW SN 2
  SeoulTGWSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.1.6.0/24
      Tags:
        - Key: Name
          Value: Seoul-TGW-SN-2
  # IDC Public SN
  IDCPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IDCVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.2.1.0/24
      Tags:
        - Key: Name
          Value: IDC-Public-SN-2
####################################################################
# SN + RT Association 
  # Seoul Public
  SeoulPublicSNRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SeoulPublicRT
      SubnetId: !Ref SeoulPublicSN
  # Seoul Public 2
  SeoulPublicSNRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SeoulPublicRT
      SubnetId: !Ref SeoulPublicSN2
  # Seoul Private
  SeoulPrivateSNRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SeoulPrivateRT
      SubnetId: !Ref SeoulPrivateSN
  # Seoul Private2
  SeoulPrivateSNRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SeoulPrivateRT2
      SubnetId: !Ref SeoulPrivateSN2
  # Seoul TGW
  SeoulTGWSNRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SeoulTGWRT
      SubnetId: !Ref SeoulTGWSN
  # Seoul TGW 2
  SeoulTGWSNRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SeoulTGWRT
      SubnetId: !Ref SeoulTGWSN2
  # IDC Public
  IDCPublicSNRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IDCPublicRT
      SubnetId: !Ref IDCPublicSN
####################################################################
# Security Groups
  # Seoul SG
  SeoulSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SeoulVPC
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3128
        ToPort: 3128
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 4500
        ToPort: 4500
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 500
        ToPort: 500
        CidrIp: 0.0.0.0/0
  # IDC SG
  IDCSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IDCVPC
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3128
        ToPort: 3128
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 4500
        ToPort: 4500
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 500
        ToPort: 500
        CidrIp: 0.0.0.0/0
####################################################################
# ENI
  # Seoul ENI 1
  SeoulNATENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SeoulPublicSN
      Description: Seoul eth0
      GroupSet:
      - !Ref SeoulSG
      PrivateIpAddress: 10.1.1.100
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: Seoul eth0
          
  SeoulEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  SeoulVPCAssociateEIP:
    Type: AWS::EC2::EIPAssociation
    DependsOn: NATEC21
    Properties:
      AllocationId: !GetAtt SeoulEIP.AllocationId
      NetworkInterfaceId: !Ref SeoulNATENI

  SeoulNATRoute:
    Type: AWS::EC2::Route
    DependsOn: NATEC21
    Properties:
      RouteTableId: !Ref SeoulPrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref SeoulNATENI
  # Seoul ENI 2
  SeoulNATENI2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SeoulPublicSN2
      Description: Seoul eth1
      GroupSet:
      - !Ref SeoulSG
      PrivateIpAddress: 10.1.2.100
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: Seoul eth1

  SeoulEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  SeoulVPCAssociateEIP2:
    Type: AWS::EC2::EIPAssociation
    DependsOn: NATEC22
    Properties:
      AllocationId: !GetAtt SeoulEIP2.AllocationId
      NetworkInterfaceId: !Ref SeoulNATENI2

  SeoulNATRoute2:
    Type: AWS::EC2::Route
    DependsOn: NATEC22
    Properties:
      RouteTableId: !Ref SeoulPrivateRT2
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref SeoulNATENI2
  # IDC VPN
  IDCNATENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref IDCPublicSN
      Description: IDC eth0
      GroupSet:
      - !Ref IDCSG
      PrivateIpAddress: 10.2.1.150
      Tags:
        - Key: Name
          Value: IDC eth0
  IDCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  IDCVPCAssociateEIP:
    Type: AWS::EC2::EIPAssociation
    DependsOn: NATEC23
    Properties:
      AllocationId: !GetAtt IDCEIP.AllocationId
      NetworkInterfaceId: !Ref IDCNATENI
  IDCNATRoute:
    Type: AWS::EC2::Route
    DependsOn: NATEC23
    Properties:
      RouteTableId: !Ref IDCPublicRT
      DestinationCidrBlock: 10.1.0.0/16
      NetworkInterfaceId: !Ref IDCNATENI
####################################################################
# EC2 
  # Seoul NAT EC2 1
  NATEC21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-052551c6a7f47b714
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Seoul-NAT-EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref SeoulNATENI
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname Seoul-NAT-1
          amazon-linux-extras install epel -y
          cat <<EOT > /home/ec2-user/list.txt
          10.1.1.100
          10.1.2.100
          10.1.3.100
          10.1.4.100
          10.2.1.100
          10.2.1.200
          EOT
          yum install httpd -y
          systemctl start httpd && systemctl enable httpd
          echo "<h1>TGW Lab - MgMt Server1</h1>" > /var/www/html/index.html
          curl -o /home/ec2-user/pingall.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/pingall.sh --silent
          cp /home/ec2-user/pingall.sh /var/www/html/pingall.sh
          cp /home/ec2-user/list.txt /var/www/html/list.txt
          chmod +x /home/ec2-user/pingall.sh
  # Seoul NAT EC2 2
  NATEC22:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-052551c6a7f47b714
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Seoul-NAT-EC2-2
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref SeoulNATENI2
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname Seoul-NAT-2
          amazon-linux-extras install epel -y
          yum install httpd -y
          systemctl start httpd && systemctl enable httpd
  # Seoul Web EC2 1
  WebEC21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d2f6341ccecfd1b2
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Seoul-Web-EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SeoulPrivateSN
          GroupSet:
            - !Ref SeoulSG
          PrivateIpAddress: 10.1.3.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname Seoul-Web-1
          amazon-linux-extras install epel -y
          yum install httpd -y
          systemctl start httpd && systemctl enable httpd
          echo "<h1>Seoul Web Server 1</h1>" > /var/www/html/index.html
  # Seoul Web EC2 2
  WebEC22:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d2f6341ccecfd1b2
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Seoul-Web-EC2-2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SeoulPrivateSN2
          GroupSet:
            - !Ref SeoulSG
          PrivateIpAddress: 10.1.4.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname Seoul-Web-2
          amazon-linux-extras install epel -y
          yum install httpd -y
          systemctl start httpd && systemctl enable httpd
          echo "<h1>Seoul Web Server 1</h1>" > /var/www/html/index.html
  # IDC NAT EC2 2
  NATEC23:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d2f6341ccecfd1b2
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: IDC-NAT-EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref IDCNATENI
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname IDC-CGW
          yum -y install tcpdump openswan
          cat <<EOF>> /etc/sysctl.conf
          net.ipv4.ip_forward=1
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.send_redirects = 0
          net.ipv4.conf.default.send_redirects = 0
          net.ipv4.conf.eth0.send_redirects = 0
          net.ipv4.conf.default.accept_redirects = 0
          net.ipv4.conf.eth0.accept_redirects = 0
          net.ipv4.conf.ip_vti0.rp_filter = 0
          net.ipv4.conf.eth0.rp_filter = 0
          net.ipv4.conf.default.rp_filter = 0
          net.ipv4.conf.all.rp_filter = 0
          EOF
          sysctl -p /etc/sysctl.conf
          curl -o /etc/ipsec.d/vpnconfig.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/6_lab_s2s-vpnconfig.sh
          chmod +x /etc/ipsec.d/vpnconfig.sh
  # IDC DNS EC2
  IDCDNS:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d2f6341ccecfd1b2
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-DNS
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCPublicSN
          GroupSet:
            - !Ref IDCSG
          PrivateIpAddress: 10.2.1.200
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname IDC-DNS
          amazon-linux-extras install epel -y
          yum -y install bind bind-utils bind-libs
          sed -i "s/listen-on port 53 { 127.0.0.1; }/listen-on port 53 { any; }/g" /etc/named.conf
          sed -i "s/allow-query     { localhost; }/allow-query     { any; }/g" /etc/named.conf
          sed -i "s/dnssec-enable yes/dnssec-enable no/g" /etc/named.conf		  
          sed -i "s/dnssec-validation yes/dnssec-validation no/g" /etc/named.conf
          cat <<EOF>> /etc/named.rfc1912.zones	
          zone "idc.internal" {
              type master;
              file "/var/named/db.idc.internal";
              allow-update { none; };
          };		  
          zone "awsneta.internal" {
              type forward;
              forward only;
              forwarders { 10.70.1.250; 10.70.2.250; };
          };
          EOF
          cat <<EOF > /var/named/data/seoul.internal.db
          \$TTL 86400
          @   IN  SOA ns1.seoul.internal. root.seoul.internal. (
                  2024062401 ; Serial
                  3600       ; Refresh
                  1800       ; Retry
                  1209600    ; Expire
                  86400 )    ; Minimum TTL

              IN  NS  ns1.seoul.internal.
          ns1 IN  A   127.0.0.1
          dns IN  A   10.2.1.200
          db  IN  A   10.2.1.100
          EOF
          systemctl start named
          systemctl enable named
  # IDC DB EC2
  IDCDB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d2f6341ccecfd1b2
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-DB
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCPublicSN
          GroupSet:
            - !Ref IDCSG
          PrivateIpAddress: 10.2.1.100
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname IDC-DB
          amazon-linux-extras install epel -y
# ####################################################################
# # TGW
#   TransitGateway:
#     Type: AWS::EC2::TransitGateway
#     Properties:
#      Tags:
#       - Key: Name
#         Value: Seoul-TGW
# ####################################################################
# # TGW Attachment
#   # Seoul TGW
#   TransitGatewayAtt:
#     Type: AWS::EC2::TransitGatewayAttachment
#     DependsOn: SeoulVPC
#     Properties:
#       VpcId: !Ref SeoulVPC
#       SubnetIds:
#       - !Ref SeoulTGWSN
#       - !Ref SeoulTGWSN2
#       TransitGatewayId: !Ref TransitGateway
#       Tags:
#         - Key: Name
#           Value: TGW1-ATT1-SeoulVPC
# ####################################################################
# # VPC Route
#   # Seoul VPC
#   SeoulRoute:
#     Type: AWS::EC2::Route
#     DependsOn: TransitGatewayAtt
#     Properties:
#       RouteTableId: !Ref SeoulPublicRT
#       DestinationCidrBlock: 10.2.0.0/16
#       TransitGatewayId: !Ref TransitGateway
#   # Seoul VPC
#   SeoulRoute2:
#     Type: AWS::EC2::Route
#     DependsOn: TransitGatewayAtt
#     Properties:
#       RouteTableId: !Ref SeoulPrivateRT
#       DestinationCidrBlock: 10.2.0.0/16
#       TransitGatewayId: !Ref TransitGateway
#   # Seoul VPC
#   SeoulRoute3:
#     Type: AWS::EC2::Route
#     DependsOn: TransitGatewayAtt
#     Properties:
#       RouteTableId: !Ref SeoulPrivateRT2
#       DestinationCidrBlock: 10.2.0.0/16
#       TransitGatewayId: !Ref TransitGateway
# ###############################################################
# # CGW 생성
#   IDCCGW:
#     Type: AWS::EC2::CustomerGateway
#     DependsOn: TransitGatewayAtt
#     Properties:
#       Type: ipsec.1
#       BgpAsn: 65000
#       IpAddress: !Ref IDCEIP
#       Tags:
#         - Key: Name
#           Value: IDC-VPN-CGW
          