Parameters:
  LatestAmiId:
    Description: (DO NOT CHANGE)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    # Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
      # - /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

# 위 문구는 ami 이미지 알아서 찾아주는 문구

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    
Mappings:
  AWSRegionArch2AMI:
    ap-southeast-2:
      HOST: SYDNEY
      VPC: SYDNEY-VPC
      IGW: SYDNEY-IGW
      RT: SYDNEY-Public-RT
      SN1: SYDNEY-Public-SN-1
      SN2: SYDNEY-Public-SN-2
      EC21: SYDNEY-EC2-1
      EC22: SYDNEY-EC2-2
    sa-east-1:
      HOST: SAOPAULO
      VPC: SAOPAULO-VPC
      IGW: SAOPAULO-IGW
      RT: SAOPAULO-Public-RT
      SN1: SAOPAULO-Public-SN-1
      SN2: SAOPAULO-Public-SN-2
      EC21: SAOPAULO-EC2-1
      EC22: SAOPAULO-EC2-2

# 위 문구는 각 리소스의 이름을 저걸로 설정

Conditions:
  CreateSydneyResources: !Equals [ !Ref 'AWS::Region', ap-southeast-2 ]
  CreateSanpaResources: !Equals [ !Ref 'AWS::Region', sa-east-1 ]
# 위 문구는 [] 안에 있는 조건이 참이면 리소스 만들기
# 위 문구의 뜻은 리전이 ap-southeast-2 일때 만든다는 뜻
  
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', VPC]

# FindInMap 함수는 위에 있는 Mappings 에서 찾아오는 것
# AWSRegionArch2AMI 는 Mappings 의 로지컬 ID라서 맘대로 가능

  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', IGW]

  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC

  MyPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', RT]

  MyDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyIGWAttachment
    Properties:
      RouteTableId: !Ref MyPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW

  MyPublicSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', SN1]

  MyPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', SN2]

  MyPublicSNRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRT
      SubnetId: !Ref MyPublicSN1

  MyPublicSNRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRT
      SubnetId: !Ref MyPublicSN2

  WEBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: WEB-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0


  MyEC21:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', EC21]
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSN1
          GroupSet:
          - !Ref WEBSG
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub
          - |+
            #!/bin/bash -v
            hostname ${host}-EC2-1
            amazon-linux-extras install -y nginx1.12
            wget https://cloudneta.github.io/test.jpg
            wget -P /usr/share/nginx/html/ https://cloudneta.github.io/test.jpg
            echo "<head><link rel='icon' href='data:;base64,iVBORw0KGgo='></head><h1>CloudNeta ${host} Web Server_1</h1><img src='test.jpg'>" > /usr/share/nginx/html/index.html
            systemctl start nginx
            systemctl enable nginx            
          - host:
              Fn::FindInMap: [AWSRegionArch2AMI, Ref: 'AWS::Region', HOST]

  MyEC22:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', EC22]
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSN2
          GroupSet:
          - !Ref WEBSG
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub
          - |+
            #!/bin/bash -v
            hostname ${host}-EC2-2
            amazon-linux-extras install -y nginx1.12            
            wget https://cloudneta.github.io/test.jpg
            wget -P /usr/share/nginx/html/ https://cloudneta.github.io/test.jpg
            echo "<head><link rel='icon' href='data:;base64,iVBORw0KGgo='></head><h1>CloudNeta ${host} Web Server_2</h1><img src='test.jpg'>" > /usr/share/nginx/html/index.html
            systemctl start nginx
            systemctl enable nginx     
          - host:
              Fn::FindInMap: [AWSRegionArch2AMI, Ref: 'AWS::Region', HOST]

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateSydneyResources
    Properties:
      Name: ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      Targets:
        - Id: !Ref MyEC21
          Port: 80
        - Id: !Ref MyEC22
          Port: 80

# Condition: CreateSydneyResources 이 문구가 들어간건
# 맨 위쪽 Conditions 라고 설정한 조건이 참이어야 배포되는 것

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: CreateSydneyResources
    Properties:
      Name: SYDNEY-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WEBSG
      Subnets:
        - !Ref MyPublicSN1
        - !Ref MyPublicSN2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateSydneyResources
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      
# GA
  GlobalAccelerator:
    Type: AWS::GlobalAccelerator::Accelerator
    Condition: CreateSydneyResources
    Properties:
      Name: !Sub '${AWS::StackName}'
      Enabled: true
      IpAddressType: IPV4

# GA 는 글로벌 서비스라서 조건을 안붙이면 2번 생성되기 때문에
# condition 조건을 넣은 것

  GAListener:
    Type: AWS::GlobalAccelerator::Listener
    Condition: CreateSydneyResources
    Properties:
      AcceleratorArn: !Ref GlobalAccelerator
      Protocol: TCP
      PortRanges:
        - FromPort: 80
          ToPort: 80

  GAEndpointGroup1:
    Type: AWS::GlobalAccelerator::EndpointGroup
    Condition: CreateSydneyResources
    DependsOn: ApplicationLoadBalancer
    Properties:
      ListenerArn: !Ref GAListener
      EndpointGroupRegion: !Ref AWS::Region
      EndpointConfigurations:
        - EndpointId: !Ref ApplicationLoadBalancer
        
  GAEndpointGroup2:
    Type: AWS::GlobalAccelerator::EndpointGroup
    Condition: CreateSanpaResources
    Properties:
      ListenerArn: arn:aws:globalaccelerator::992382759440:accelerator/e7e148fe-418a-4c8c-94f9-10b02287083e/listener/4c99ddbd
      EndpointGroupRegion: !Ref AWS::Region
      EndpointConfigurations:
        - EndpointId: !Ref MyEC21
        - EndpointId: !Ref MyEC22
