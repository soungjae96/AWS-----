Parameters:
  KeyName:
    Description: Name of an existing EC2 keyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    
Resources:
  AWSVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.70.0.0/16
      Tags:
        - Key: Name
          Value: AWS-VPC

  IDCVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: false
      EnableDnsHostnames: false
      CidrBlock: 10.80.0.0/16
      Tags:
        - Key: Name
          Value: IDC-VPC

  VPCPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref AWSVPC
      PeerVpcId: !Ref IDCVPC
      Tags:
      - Key: Name
        Value: VPCPeering

  InboundEP:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: INBOUND
      IpAddresses:
        - Ip: 10.70.1.250
          SubnetId: !Ref AWSPublicSN
        - Ip: 10.70.2.250
          SubnetId: !Ref AWSPublicSN2
      SecurityGroupIds:
        - !Ref AWSSG
      Tags:
        - Key: Name
          Value: idc-to-aws-inbound

  OutboundEP:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: OUTBOUND
      IpAddresses:
        - Ip: 10.70.1.251
          SubnetId: !Ref AWSPublicSN
        - Ip: 10.70.2.251
          SubnetId: !Ref AWSPublicSN2
      SecurityGroupIds:
        - !Ref AWSSG
      Tags:
        - Key: Name
          Value: aws-to-idc-outbound

  ForwardRule:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      DomainName: idcneta.internal
      Name: IDC-TO-AWS_ForwardRule
      ResolverEndpointId: !Ref OutboundEP
      RuleType: FORWARD
      TargetIps:
        - Ip: 10.80.1.200
          Port: 53

  ResolverRuleAssociation:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: Resolver-Rule-Association
      ResolverRuleId: !Ref ForwardRule
      VPCId: !Ref AWSVPC

  VPC2DNSOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: idcneta.internal
      DomainNameServers:
        - 10.80.1.200, 8.8.8.8
      NtpServers:
        - 203.248.240.140, 168.126.3.6
      Tags:
        - Key: Name
          Value: IDC-VPC2-DHCPOptions

  VPC2DNSOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref VPC2DNSOptions
      VpcId: !Ref IDCVPC        

  AWSIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-IGW

  IDCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IDC-IGW

  AWSIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AWSIGW
      VpcId: !Ref AWSVPC

  IDCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IDCIGW
      VpcId: !Ref IDCVPC

  AWSRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS-public-RT

  IDCRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IDCVPC
      Tags:
        - Key: Name
          Value: IDC-public-RT

  AWSPubRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSIGWAttachment
    Properties:
      RouteTableId: !Ref AWSRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AWSIGW

  AWSVPCRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AWSRT
      DestinationCidrBlock: 10.80.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeering

  IDCVPCRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref IDCRT
      DestinationCidrBlock: 10.70.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeering

  IDCPubRoute:
    Type: AWS::EC2::Route
    DependsOn: IDCIGWAttachment
    Properties:
      RouteTableId: !Ref IDCRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IDCIGW

  AWSPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.70.1.0/24
      Tags:
        - Key: Name
          Value: AWS-Public-SN-1

  AWSPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.70.2.0/24
      Tags:
        - Key: Name
          Value: AWS-Public-SN-2

  IDCPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IDCVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.80.1.0/24
      Tags:
        - Key: Name
          Value: IDC-Public-SN-2          

  AWSPubSNRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSRT
      SubnetId: !Ref AWSPublicSN

  AWSPubSNRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSRT
      SubnetId: !Ref AWSPublicSN2

  IDCPubSNRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IDCRT
      SubnetId: !Ref IDCPublicSN

  IDCENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref IDCPublicSN
      Description: Instance1 eth0
      GroupSet:
      - !Ref IDCSG
      PrivateIpAddress: 10.80.1.200
      Tags:
        - Key: Name
          Value: NAT-Instance eth0

  IDCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  VPCAssociateEIP:
    Type: AWS::EC2::EIPAssociation
    DependsOn: IDCEC21
    Properties:
      AllocationId: !GetAtt IDCEIP.AllocationId
      NetworkInterfaceId: !Ref IDCENI

  PrivateDNS:
    Type: AWS::Route53::HostedZone
    DependsOn: AWSVPC
    Properties:
      HostedZoneConfig:
        Comment: Private hosted zone for awsneta.net
      Name: awsneta.internal
      VPCs:
        - VPCId: !Ref AWSVPC
          VPCRegion: ap-northeast-2
      HostedZoneTags:
        - Key: Name
          Value: awsnetadomain

  RecordSet1:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: websrv1.awsneta.internal
      Type: A
      TTL: 30
      HostedZoneId: !Ref PrivateDNS  # 프라이빗 호스티드 존 이름을 사용
      ResourceRecords:
        - !GetAtt AWSEC21.PrivateIp

  RecordSet2:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: websrv2.awsneta.internal
      Type: A
      TTL: 30
      HostedZoneId: !Ref PrivateDNS  # 프라이빗 호스티드 존 이름을 사용
      ResourceRecords:
        - !GetAtt AWSEC22.PrivateIp

  RecordSet3:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: db.awsneta.internal
      Type: A
      TTL: 30
      HostedZoneId: !Ref PrivateDNS  # 프라이빗 호스티드 존 이름을 사용
      ResourceRecords:
        - !GetAtt AWSEC22.PrivateIp

  AWSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref AWSVPC
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0 
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0

  IDCSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IDCVPC
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0  
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0

  AWSEC21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: AWS-Public-EC2-01
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref AWSPublicSN
          GroupSet:
            - !Ref AWSSG
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.70.1.100
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname AWS-EC2-01
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>Test Web Server 1</h1>" > /var/www/html/index.html

  AWSEC22:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: AWS-Public-EC2-02
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref AWSPublicSN2
          GroupSet:
            - !Ref AWSSG
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.70.2.100
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname AWS-EC2-02
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>Test Web Server 2</h1>" > /var/www/html/index.html

  IDCEC21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-Public-EC2-01
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref IDCENI        
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname IDC-EC2-01
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>IDC Test Web Server</h1>" > /var/www/html/index.html

  IDCEC22:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-Public-EC2-02
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCPublicSN
          GroupSet:
            - !Ref IDCSG
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.80.1.100     
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname IDC-EC2-02
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>IDC Test Web Server 2</h1>" > /var/www/html/index.html
