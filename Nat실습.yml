Parameters:
  KeyName:
    Description: Name of an existing EC2 keyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    
Resources:
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      Tags:
        - Key: Name
          Value: NATInstanceVPC1
  
  IGW1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: NATInstanceIGW1

  CloudNetaIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW1
      VpcId: !Ref VPC1

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: NATInstancePublicRouteTable1
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: CloudNetaIGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.1.1.0/24
      Tags:
        - Key: Name
          Value: NATInstanceSubnet1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.1.2.0/24
      Tags:
        - Key: Name
          Value: NATInstanceSubnet2

  NATPublicSNRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref Subnet1

  NATNetaPrivateSNRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref Subnet2

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: PrivateSub3

  Subnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: PrivateSub4

  NATNetaPrivateSNRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref Subnet3

  NATNetaPrivateSNRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref Subnet4

  InstanceENI1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Subnet1
      Description: Instance1 eth0
      GroupSet:
      - !Ref SecurityGroup2
      PrivateIpAddress: 10.1.1.100
      Tags:
        - Key: Name
          Value: NAT-Instance eth0

  VPCEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  VPCAssociateEIP1:
    Type: AWS::EC2::EIPAssociation
    DependsOn: Instance1
    Properties:
      AllocationId: !GetAtt VPCEIP1.AllocationId
      NetworkInterfaceId: !Ref InstanceENI1

  InstanceENI2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Subnet2
      Description: Instance2 eth0
      GroupSet:
      - !Ref SecurityGroup2
      PrivateIpAddress: 10.1.2.100
      Tags:
        - Key: Name
          Value: NAT-Instance eth0

  VPCEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  
  VPCAssociateEIP2:
    Type: AWS::EC2::EIPAssociation
    DependsOn: Instance2
    Properties:
      AllocationId: !GetAtt VPCEIP2.AllocationId
      NetworkInterfaceId: !Ref InstanceENI2

  NATRoute1:
    Type: AWS::EC2::Route
    DependsOn: Instance1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref InstanceENI1

  NATRoute2:
    Type: AWS::EC2::Route
    DependsOn: Instance2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref InstanceENI2

  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c2d3e23e757b5d84
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SourceDestCheck: False
      Tags:
        - Key: Name
          Value: NAT-Instance
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref InstanceENI1
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname NAT-Instance
          yum -y install tcpdump iptraf
      
  Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c2d3e23e757b5d84
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SourceDestCheck: False
      Tags:
        - Key: Name
          Value: NAT-Instance2
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref InstanceENI2
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname NAT-Instance
          yum -y install tcpdump iptraf
          
  EC21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: NATPrivateEC21
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref Subnet3
          GroupSet:
            - !Ref SecurityGroup2
          AssociatePublicIpAddress: False
          PrivateIpAddress: 10.1.3.100
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>Test Web Server</h1>" > /var/www/html/index.html

  EC22:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: NATPrivateEC22
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref Subnet4
          GroupSet:
            - !Ref SecurityGroup2
          AssociatePublicIpAddress: False
          PrivateIpAddress: 10.1.4.100
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>Test Web Server</h1>" > /var/www/html/index.html

  SecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0   
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0        