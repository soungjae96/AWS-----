Parameters:
  KeyName:
    Description: Name of an existing EC2 keyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
####################################################################
Resources:
####################################################################
# VPC
  # AWS VPC 생성
  AWSVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.50.0.0/16
      Tags:
        - Key: Name
          Value: AWS-VPC
  # IDC VPC 생성
  IDCVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.60.0.0/16
      Tags:
        - Key: Name
          Value: IDC-VPC
####################################################################
# IGW
  # AWS IGW
  AWSIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-IGW
  # IDC IGW
  IDCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IDC-IGW

  AWSIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AWSIGW
      VpcId: !Ref AWSVPC
  IDCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IDCIGW
      VpcId: !Ref IDCVPC
####################################################################
# RT
  # IDC Public RT
  IDCPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IDCVPC
      Tags:
        - Key: Name
          Value: IDC-public-RT
  # IDC Private RT
  IDCPrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IDCVPC
      Tags:
        - Key: Name
          Value: IDC-Private-RT
  # AWS Public RT
  AWSPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS-Puvlic-RT
  # IDC Public RT Default Route
  IDCPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IDCIGWAttachment
    Properties:
      RouteTableId: !Ref IDCPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IDCIGW
  # AWS Public RT Default Route
  AWSPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSIGWAttachment
    Properties:
      RouteTableId: !Ref AWSPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AWSIGW
####################################################################
# SN
  # IDC Public SN
  IDCPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IDCVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.60.0.0/24
      Tags:
        - Key: Name
          Value: IDC-Public-SN
  # IDC Private SN
  IDCPrivateSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IDCVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.60.1.0/24
      Tags:
        - Key: Name
          Value: IDC-Private-SN
  # AWS Public SN
  AWSPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.50.1.0/24
      Tags:
        - Key: Name
          Value: AWS-Public-SN
####################################################################
# SN + RT Association
  IDCPublicSNRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IDCPublicRT
      SubnetId: !Ref IDCPublicSN
  IDCPrivateSNRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IDCPrivateRT
      SubnetId: !Ref IDCPrivateSN
  AWSPublicSNRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSPublicRT
      SubnetId: !Ref AWSPublicSN
####################################################################
# IDC NAT ENI
  # IDC NAT 1 ENI
  IDCENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref IDCPublicSN
      Description: IDC eth0
      GroupSet:
      - !Ref IDCSG1
      PrivateIpAddress: 10.60.0.100
      Tags:
        - Key: Name
          Value: IDC eth0
  IDCNATEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  IDCAssociateEIP:
    Type: AWS::EC2::EIPAssociation
    DependsOn: IDCEC21
    Properties:
      AllocationId: !GetAtt IDCNATEIP1.AllocationId
      NetworkInterfaceId: !Ref IDCENI
  IDCNATRoute:
    Type: AWS::EC2::Route
    DependsOn: IDCEC21
    Properties:
      RouteTableId: !Ref IDCPrivateRT
      DestinationCidrBlock: 10.50.0.0/16
      NetworkInterfaceId: !Ref IDCENI
####################################################################
# Security Groups
  # IDC SG 1
  IDCSG1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IDCVPC
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 4500
        ToPort: 4500
        CidrIp: 0.0.0.0/0
  # IDC SG 2
  IDCSG2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IDCVPC
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
  # AWS Public SG
  AWSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref AWSVPC
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0
####################################################################
# IDC EC2
  # NAT1
  IDCEC21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SourceDestCheck: False
      Tags:
        - Key: Name
          Value: IDC-NAT-01
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref IDCENI
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname IDC-CGW
          yum -y install tcpdump openswan
          cat <<EOF>> /etc/sysctl.conf
          net.ipv4.ip_forward=1
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.send_redirects = 0
          net.ipv4.conf.default.send_redirects = 0
          net.ipv4.conf.eth0.send_redirects = 0
          net.ipv4.conf.default.accept_redirects = 0
          net.ipv4.conf.eth0.accept_redirects = 0
          net.ipv4.conf.ip_vti0.rp_filter = 0
          net.ipv4.conf.eth0.rp_filter = 0
          net.ipv4.conf.default.rp_filter = 0
          net.ipv4.conf.all.rp_filter = 0
          EOF
          sysctl -p /etc/sysctl.conf
          curl -o /etc/ipsec.d/vpnconfig.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/6_lab_s2s-vpnconfig.sh
          chmod +x /etc/ipsec.d/vpnconfig.sh
  # IDC Web
  IDCEC22:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-EC2-01
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCPrivateSN
          GroupSet:
            - !Ref IDCSG2
          PrivateIpAddress: 10.60.1.100
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname IDC-EC2
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
####################################################################
# AWS EC2
  # AWS Web
  AWSEC21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: AWS-EC2-01
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref AWSPublicSN
          GroupSet:
            - !Ref AWSSG
          PrivateIpAddress: 10.50.1.100
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname AWS-EC2
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
# ###############################################################
# # VGW 생성
#   VPC2VPNGW:
#     Type: AWS::EC2::VPNGateway
#     Properties:
#       Type: ipsec.1
#       Tags:
#         - Key: Name
#           Value: AWS-VPNGW
#   VPC2AttachVPNGW:
#     Type: AWS::EC2::VPCGatewayAttachment
#     Properties:
#       VpcId: !Ref AWSVPC
#       VpnGatewayId: !Ref VPC2VPNGW
# ###############################################################
# # CGW 생성
#   VPC2CGW:
#     Type: AWS::EC2::CustomerGateway
#     Properties:
#       Type: ipsec.1
#       BgpAsn: 65000
#       IpAddress: !Ref IDCNATEIP1
#       Tags:
#         - Key: Name
#           Value: IDC-VPN-CGW
# ###############################################################
# # VPN 커넥션생성 
#   VPCAWSVpnConnection:
#     Type: AWS::EC2::VPNConnection
#     Properties:
#       Type: ipsec.1
#       CustomerGatewayId: !Ref VPC2CGW
#       VpnGatewayId: !Ref VPC2VPNGW # TGW 랑 연동할땐 TGW Id 넣기
#       VpnTunnelOptionsSpecifications:
#         - PreSharedKey: cloudneta
#         - PreSharedKey: cloudneta
#       StaticRoutesOnly: True
#       Tags:
#         - Key: Name
#           Value: AWS-VPNConnection-IDC
# ###############################################################
# # VPN 정적경로 생성
#   VPCAWSVpnConnectionRoute:
#     Type: AWS::EC2::VPNConnectionRoute
#     Properties:
#       DestinationCidrBlock: 10.60.0.0/16
#       VpnConnectionId: !Ref VPCAWSVpnConnection
#   VPNAWSGatewayRoutePropagation:
#     Type: AWS::EC2::VPNGatewayRoutePropagation
#     DependsOn: VPCAWSVpnConnection
#     Properties:
#       RouteTableIds:
#         - !Ref AWSPublicRT
#       VpnGatewayId: !Ref VPC2VPNGW