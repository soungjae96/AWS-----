Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:

####################################################################
# Seoul-VPC
  # Seoul AWS VPC
  SeoulVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Seoul-VPC

  # Seoul IDC VPC
  SeoulIDC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.2.0.0/16
      EnableDnsSupport: false
      EnableDnsHostnames: false
      Tags:
        - Key: Name
          Value: Seoul-IDC
####################################################################
# IGW
  # Seoul IGW
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Seoul-VPC-IGW
  # Seoul IDC IGW
  IDCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Seoul-IDC-IGW
  # IGW ATT
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref SeoulVPC
  # IDC IGW ATT
  IDCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IDCIGW
      VpcId: !Ref SeoulIDC
####################################################################
# RT
  # Seoul RT
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeoulVPC
      Tags:
        - Key: Name
          Value: SeoulVPC-Public-RT
  # Seoul Default RT - IGW로 가는 경로
  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  # Seoul Web Private RT
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeoulVPC
      Tags:
        - Key: Name
          Value: Seoul-Private-RT1
  # Seoul Web RT - NAT로 가는 경로
  ENIRoute1:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref Instance1ENIEth0
  # Seoul Web Private RT 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeoulVPC
      Tags:
        - Key: Name
          Value: Seoul-Private-RT2
  # Seoul Web RT 2 - NAT로 가는 경로
  ENIRoute2:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref Instance2ENIEth0

  # IDC RT
  IDCPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeoulIDC
      Tags:
        - Key: Name
          Value: Seoul-IDC-Public-RT
  # IDC Default RT - IGW로 가는 경로
  IDCDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: IDCIGWAttachment
    Properties:
      RouteTableId: !Ref IDCPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IDCIGW
  # IDC 에서 CGW 로 가는 루트
  IDCCGWRoute:
    Type: AWS::EC2::Route
    DependsOn: IDCCGWInstance
    Properties:
      RouteTableId: !Ref IDCPublicRouteTable
      DestinationCidrBlock: 10.0.0.0/8
      InstanceId: !Ref IDCCGWInstance
####################################################################
# Subnet  
  # NAT Seoul Sub 
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.1.0/24
      Tags:
        - Key: Name
          Value: Seoul-NAT-SN
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.2.0/24
      Tags:
        - Key: Name
          Value: Seoul-NAT-SN2

  # Web Subnet 1
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: Seoul-Web-SN
  # Web Subnet 2
  Subnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: Seoul-Web-SN2

  # Seoul Subnet - TGW
  Subnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.5.0/24
      Tags:
        - Key: Name
          Value: Seoul-TGW-SN
  # Seoul Subnet 2 - TGW
  Subnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.6.0/24
      Tags:
        - Key: Name
          Value: Seoul-TGW-SN2

  # IDC Subnet 
  IDCSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeoulIDC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.2.1.0/24
      Tags:
        - Key: Name
          Value: Seoul-IDC-Subnet1
####################################################################
# RT + SN ATT
  # Seoul NAT RT + SN ATT
  Subnet1RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet1
  Subnet2RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet2

  # Seoul Web RT + SN ATT
  Subnet3RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref Subnet3
  Subnet4RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref Subnet4

  # Seoul IDC RT + SN ATT
  SNRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IDCPublicRouteTable
      SubnetId: !Ref IDCSubnet1
####################################################################
# SG
  SeoulSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SeoulVPC
      GroupDescription: My-SG
      Tags:
      - Key : Name
        Value : My-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '500'
          ToPort: '500'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
  # IDC SG
  IDCSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SeoulIDC
      GroupDescription: My-SG
      Tags:
      - Key : Name
        Value : My-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '500'
          ToPort: '500'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
####################################################################          
# ENI + EIP + EIPASS
  # NAT용 EIP 1번
  Instance1ENIEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Subnet1
      Description: Instance1 eth0
      GroupSet: 
        - !Ref SeoulSG
      PrivateIpAddress: 10.1.1.100
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT-Instance1 eth0          
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc      
  VPCAssociateEIP1:
    Type: AWS::EC2::EIPAssociation
    DependsOn: Instance1
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      NetworkInterfaceId: !Ref Instance1ENIEth0
  # NAT용 EIP 2번
  Instance2ENIEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Subnet2
      Description: Instance2 eth0
      GroupSet: 
        - !Ref SeoulSG
      PrivateIpAddress: 10.1.2.100
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT-Instance2 eth0          
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc      
  VPCAssociateEIP2:
    Type: AWS::EC2::EIPAssociation
    DependsOn: Instance2
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      NetworkInterfaceId: !Ref Instance2ENIEth0

  # IDC CGW 용 ENI + EIP
  CGWInstanceENIEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref IDCSubnet1
      Description: Instance1 eth0
      GroupSet: 
        - !Ref IDCSG
      PrivateIpAddress: 10.2.1.240
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: IDC-CGW eth0
  EIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc      
  VPCAssociateEIP3:
    Type: AWS::EC2::EIPAssociation
    DependsOn: IDCCGWInstance
    Properties:
      AllocationId: !GetAtt EIP3.AllocationId
      NetworkInterfaceId: !Ref CGWInstanceENIEth0
####################################################################
# NAT EC2
  # Seoul NAT 인스턴스 1
  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00550ccc38e992b78
      InstanceType: t2.micro
      KeyName: !Ref KeyName    
      Tags:
        - Key: Name
          Value: NAT-Instance1
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Instance1ENIEth0
          DeviceIndex: 0
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname NAT-Instance1
          yum -y install tcpdump iptraf
  # Seoul NAT 인스턴스 2
  Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00550ccc38e992b78
      InstanceType: t2.micro
      KeyName: !Ref KeyName    
      Tags:
        - Key: Name
          Value: NAT-Instance2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Instance2ENIEth0
          DeviceIndex: 0
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname NAT-Instance2
          yum -y install tcpdump iptraf
####################################################################
# Web EC2
  # Seoul Web 인스턴스 1
  Instance3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e4a9ad2eb120e054
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Web-Instance1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref Subnet3
          GroupSet:
            - !Ref SeoulSG
          PrivateIpAddress: 10.1.3.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          hostnamectl --static set-hostname Web-Instance1
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd lynx
          systemctl start httpd && systemctl enable httpd
          echo "<h1>Web-Instance1 Web Server</h1>" > /var/www/html/index.html
  # Seoul Web 인스턴스 2
  Instance4:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e4a9ad2eb120e054
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Web-Instance2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref Subnet4
          GroupSet:
            - !Ref SeoulSG
          PrivateIpAddress: 10.1.4.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          hostnamectl --static set-hostname Web-Instance2
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd lynx
          systemctl start httpd && systemctl enable httpd
          echo "<h1>Web-Instance2 Web Server</h1>" > /var/www/html/index.html
  # IDC CGW 인스턴스
  IDCCGWInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e4a9ad2eb120e054
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-CGW
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref CGWInstanceENIEth0
          DeviceIndex: 0     
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname IDC-CGW
          yum -y install tcpdump openswan
          cat <<EOF>> /etc/sysctl.conf
          net.ipv4.ip_forward=1
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.send_redirects = 0
          net.ipv4.conf.default.send_redirects = 0
          net.ipv4.conf.eth0.send_redirects = 0
          net.ipv4.conf.default.accept_redirects = 0
          net.ipv4.conf.eth0.accept_redirects = 0
          net.ipv4.conf.ip_vti0.rp_filter = 0
          net.ipv4.conf.eth0.rp_filter = 0
          net.ipv4.conf.default.rp_filter = 0
          net.ipv4.conf.all.rp_filter = 0
          EOF
          sysctl -p /etc/sysctl.conf
          curl -o /etc/ipsec.d/vpnconfig.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/8_lab_vpnconfig_seoul.sh
          chmod +x /etc/ipsec.d/vpnconfig.sh  
  # IDC DNS 인스턴스
  IDCDNS:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e4a9ad2eb120e054
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-DNSSRV
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCSubnet1
          GroupSet:
            - !Ref IDCSG
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.2.1.200
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname DNS-Instance
            yum -y update
            yum -y install bind bind-util bind-libs
            systemctl start named
            chkconfig named on
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
            # /etc/named.conf 설정
            echo 'zone "aws-seoul.internal" {' >> /etc/named.conf
            echo '  type forward;' >> /etc/named.conf
            echo '  forward only;' >> /etc/named.conf
            echo '  forwarders { 10.1.3.250; 10.1.4.250; };' >> /etc/named.conf
            echo '};' >> /etc/named.conf
            
            echo 'zone "aws-singapore.internal" {' >> /etc/named.conf
            echo '  type forward;' >> /etc/named.conf
            echo '  forward only;' >> /etc/named.conf
            echo '  forwarders { 10.3.3.250; 10.3.4.250; };' >> /etc/named.conf
            echo '};' >> /etc/named.conf
            
            echo 'zone "idc-singapore.internal" {' >> /etc/named.conf
            echo '  type forward;' >> /etc/named.conf
            echo '  forward only;' >> /etc/named.conf
            echo '  forwarders { 10.4.1.200; };' >> /etc/named.conf
            echo '};' >> /etc/named.conf
            
            sed -i 's/127.0.0.1/any/g' /etc/named.conf
            sed -i 's/allow-query     { localhost; };/allow-query     { any; };/g' /etc/named.conf
            sed -i 's/dnssec-enable yes;/dnssec-enable no;/g' /etc/named.conf
            sed -i 's/dnssec-validation yes;/dnssec-validation no; forwarders { 8.8.8.8; }; forward only; auth-nxdomain no;/g' /etc/named.conf
            
            # /etc/named.rfc1912.zones 설정
            echo 'zone "idc-seoul.internal" {' >> /etc/named.rfc1912.zones
            echo '  type master;' >> /etc/named.rfc1912.zones
            echo '  file "idc.zone";' >> /etc/named.rfc1912.zones
            echo '  allow-update { none; };' >> /etc/named.rfc1912.zones
            echo '};' >> /etc/named.rfc1912.zones
            
            echo 'zone "2.10.in-addr.arpa" {' >> /etc/named.rfc1912.zones
            echo '  type master;' >> /etc/named.rfc1912.zones
            echo '  file "cdi.zone";' >> /etc/named.rfc1912.zones
            echo '  allow-update { none; };' >> /etc/named.rfc1912.zones
            echo '};' >> /etc/named.rfc1912.zones

            # /var/named/idc.zone 설정
            echo '$TTL 30' > /var/named/idc.zone
            echo "@ IN  SOA idc-seoul.internal.   root.idc-seoul.internal. (" >> /var/named/idc.zone
            echo "  20211003 ; serial" >> /var/named/idc.zone
            echo "  3600 ; refresh" >> /var/named/idc.zone
            echo "  900 ; retry" >> /var/named/idc.zone
            echo "  604800 ; expire" >> /var/named/idc.zone
            echo "  86400 ; minimum ttl" >> /var/named/idc.zone
            echo ")" >> /var/named/idc.zone
            echo "@ IN  NS  ns.idc-seoul.internal." >> /var/named/idc.zone
            echo "ns    IN  A   10.2.1.200" >> /var/named/idc.zone
            echo "db    IN  A   10.2.1.100" >> /var/named/idc.zone
            echo "dns    IN  A   10.2.1.200" >> /var/named/idc.zone
            
            echo '$TTL 30' > /var/named/cdi.zone
            echo "@ IN  SOA idc-seoul.internal.   root.idc-seoul.internal. (" >> /var/named/cdi.zone
            echo "  20211003 ; serial" >> /var/named/cdi.zone
            echo "  3600 ; refresh" >> /var/named/cdi.zone
            echo "  900 ; retry" >> /var/named/cdi.zone
            echo "  604800 ; expire" >> /var/named/cdi.zone
            echo "  86400 ; minimum ttl" >> /var/named/cdi.zone
            echo ")" >> /var/named/cdi.zone
            echo "@ IN  NS  ns.idc-seoul.internal." >> /var/named/cdi.zone
            echo "3    IN  PTR   ns.idc-seoul.internal." >> /var/named/cdi.zone
            echo "100.1    IN  PTR   db.idc-seoul.internal." >> /var/named/cdi.zone
            echo "200.1    IN  PTR   dns.idc-seoul.internal." >> /var/named/cdi.zone
            
            chown root:named /var/named/idc.zone
            chown root:named /var/named/cdi.zone
            
            systemctl restart named
  # IDC DB 인스턴스
  IDCDB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e4a9ad2eb120e054
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-DBSRV
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCSubnet1
          GroupSet:
            - !Ref IDCSG
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.2.1.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname Seoul-IDC-DB
          yum install -y mariadb-server mariadb lynx
          systemctl start mariadb && systemctl enable mariadb
          echo -e "\n\nqwe123\nqwe123\ny\ny\ny\ny\n" | /usr/bin/mysql_secure_installation
          mysql -uroot -pqwe123 -e "CREATE DATABASE sample; GRANT ALL PRIVILEGES ON *.* TO 'gasida'@'%' IDENTIFIED BY 'qwe123'; GRANT REPLICATION SLAVE ON *.* TO 'repl_user'@'%' IDENTIFIED BY 'qwe123'; flush privileges;"
          mysql -uroot -pqwe123 -e "USE sample;CREATE TABLE EMPLOYEES (ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,NAME VARCHAR(45),ADDRESS VARCHAR(90));"
          cat <<EOT> /etc/my.cnf
          [mysqld]
          datadir=/var/lib/mysql
          socket=/var/lib/mysql/mysql.sock
          symbolic-links=0        
          #아래부분만 추가할것         
          log-bin=mysql-bin
          server-id=1
          [mysqld_safe]
          log-error=/var/log/mariadb/mariadb.log
          pid-file=/var/run/mariadb/mariadb.pid
          !includedir /etc/my.cnf.d
          EOT
          systemctl restart mariadb
          cat <<EOT> /home/ec2-user/list.txt
          10.1.3.100
          web1.aws-seoul.internal
          10.1.4.100
          web2.aws-seoul.internal
          10.2.1.100
          db.idc-seoul.internal
          10.2.1.200
          dns.idc-seoul.internal
          10.3.3.100
          web1.aws-singapore.internal
          10.4.1.100
          db.idc-singapore.internal
          10.4.1.200
          dns.idc-singapore.internal
          EOT
          curl -o /home/ec2-user/pingall.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/pingall.sh --silent
          chmod +x /home/ec2-user/pingall.sh
####################################################################
# DHCP Option
  IDCDHCPOption:
    Type: AWS::EC2::DHCPOptions
    Properties:
      Tags:
        - Key: Name
          Value: IDC-VPC-DHCPOption
      DomainName: idc-seoul.internal
      DomainNameServers:
        - 10.2.1.200,8.8.8.8
      NtpServers:
        - 203.248.240.140
        - 168.126.3.6       
  IDCDHCPAssoc:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !GetAtt IDCDHCPOption.DhcpOptionsId
      VpcId: !Ref SeoulIDC
####################################################################
# TGW
  TGW1:
    Type: AWS::EC2::TransitGateway
    Properties:
      Tags:
        - Key: Name
          Value: Seoul-TGW
# TGW ATT
  TGWAtt1:
    Type: AWS::EC2::TransitGatewayAttachment
    DependsOn: SeoulVPC
    Properties:
      VpcId: !Ref SeoulVPC
      SubnetIds:
        - !Ref Subnet5
        - !Ref Subnet6
      TransitGatewayId: !Ref TGW1
      Tags:
        - Key: Name
          Value: TGW1-ATT1-Seoul-VPC
# TGW Private 
  VPCTGWRoute1:
    Type: AWS::EC2::Route
    DependsOn: TGWAtt1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref TGW1
  VPCTGWRoute2:
    Type: AWS::EC2::Route
    DependsOn: TGWAtt1
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref TGW1
####################################################################
# CGW
  # IDC 인스턴스를 CGW 에 연동
  IDCCGW:
    Type: AWS::EC2::CustomerGateway
    DependsOn: EIP3
    Properties:
      Type: ipsec.1
      BgpAsn: 65000
      IpAddress: !Ref EIP3
      Tags:
        - Key: Name
          Value: IDC-VPN-CGW
          
  VPCAWSVpnConnection:
    Type: AWS::EC2::VPNConnection
    Properties:
      Type: ipsec.1
      StaticRoutesOnly: true
      CustomerGatewayId: !Ref IDCCGW
      TransitGatewayId: !Ref TGW1
      VpnTunnelOptionsSpecifications:
        - PreSharedKey: cloudneta
      Tags:
        - Key: Name
          Value: TGW-VPNConnection-CGW
####################################################################
# ALB
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref SeoulVPC
      Targets:
        - Id: !Ref Instance3
          Port: 80
        - Id: !Ref Instance4
          Port: 80
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Seoul-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SeoulSG
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP