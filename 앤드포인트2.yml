Parameters:
  KeyName:
    Description: Name of an existing EC2 keyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    
Resources:
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Cloud-VPC

  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 20.0.0.0/16
      Tags:
        - Key: Name
          Value: Custom-VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Cloud-IGW

  IGW2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Custom-IGW

  VPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC1

  VPCIGWAttachment2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW2
      VpcId: !Ref VPC2

  PubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: Cloud-Pub-RT
  
  CustomPubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: Custom-Pub-RT

  PubRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCIGWAttachment
    Properties:
      RouteTableId: !Ref PubRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  CustomPubRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCIGWAttachment
    Properties:
      RouteTableId: !Ref CustomPubRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW2

  PubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: Cloud-Public-SN

  CustomPubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 20.0.0.0/24
      Tags:
        - Key: Name
          Value: Custom-Public-SN

  PubSNRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRT
      SubnetId: !Ref PubSubnet

  PubSNRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CustomPubRT
      SubnetId: !Ref CustomPubSubnet

  PriRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: Cloud-Private-RT

  PriSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: Cloud-Private-SN

  PriSNRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PriRT
      SubnetId: !Ref PriSubnet

  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0

  MySG2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC2
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0

  MyEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Cloud-Public-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PubSubnet
          GroupSet:
            - !Ref MySG
          AssociatePublicIpAddress: true

  PrivateEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Cloud-Private-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PriSubnet
          GroupSet:
            - !Ref MySG
          AssociatePublicIpAddress: False
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart

  CustomWeb1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Custom-Web-1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref CustomPubSubnet
          GroupSet:
            - !Ref MySG2
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>Test Web Server</h1>" > /var/www/html/index.html

  CustomWeb2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Custom-Web-2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref CustomPubSubnet
          GroupSet:
            - !Ref MySG2
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>Test Web Server</h1>" > /var/www/html/index.html
  
  EndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      NetworkLoadBalancerArns:
        - !Ref CustomNLB
      AcceptanceRequired: False

  Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC1
      VpcEndpointType: 'Interface'
      SubnetIds:
      - !Ref PubSubnet
      SecurityGroupIds:
      - !Ref MySG
      ServiceName: !Sub
        - 'com.amazonaws.vpce.${AWS::Region}.${EndpointService}'
        - EndpointService: !Ref EndpointService

  CustomNLBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Custom-NLB-TG
      Port: 80
      Protocol: TCP
      VpcId: !Ref VPC2
      Targets:
        - Id: !Ref CustomWeb1
          Port: 80
        - Id: !Ref CustomWeb2
          Port: 80

  CustomNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: VPCIGWAttachment2
    Properties:
      Type: network
      Scheme: internet-facing
      Subnets:
        - !Ref CustomPubSubnet
      Tags:
        - Key: Name
          Value: Custom-NLB

  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CustomNLBTG
      LoadBalancerArn: !Ref CustomNLB
      Port: 80
      Protocol: TCP