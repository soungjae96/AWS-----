Parameters:
  KeyName:
    Description: Name of an existing EC2 keyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    
Resources:
  ELBVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: ELB-VPC

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 20.0.0.0/16
      Tags:
        - Key: Name
          Value: My-VPC          

  ELBIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ELB-IGW

  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My-IGW          

  ELBIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref ELBIGW
      VpcId: !Ref ELBVPC

  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC

  ELBRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ELBVPC
      Tags:
        - Key: Name
          Value: ELB-RT

  MyRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: My-RT

  ELBRoute:
    Type: AWS::EC2::Route
    DependsOn: ELBIGWAttachment
    Properties:
      RouteTableId: !Ref ELBRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ELBIGW

  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyIGWAttachment
    Properties:
      RouteTableId: !Ref MyRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW

  ELBSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ELBVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: ELB-SN-1

  ELBSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ELBVPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: ELB-SN-2

  MySN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 20.0.0.0/24
      Tags:
        - Key: Name
          Value: My-SN-2

  ELBRTSNAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ELBRT
      SubnetId: !Ref ELBSN

  ELBRTSNAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ELBRT
      SubnetId: !Ref ELBSN2

  MyRTSNAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyRT
      SubnetId: !Ref MySN

  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref ELBVPC
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 161
        ToPort: 162
        CidrIp: 0.0.0.0/0

  MySG2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  # NLBTG:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: NLB-TG
  #     Port: 80
  #     Protocol: TCP
  #     HealthCheckPort: 80
  #     VpcId: !Ref ELBVPC
  #     Targets:
  #       - Id: !Ref ELBEC21
  #         Port: 80
  #       - Id: !Ref ELBEC22
  #         Port: 80

  # NLBTG2:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: SNMP-TG
  #     Port: 161
  #     Protocol: UDP
  #     HealthCheckPort: 80
  #     VpcId: !Ref ELBVPC
  #     Targets:
  #       - Id: !Ref ELBEC21
  #         Port: 161
  #       - Id: !Ref ELBEC22
  #         Port: 161

  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC
      Targets:
        - Id: !Ref ELBEC21
          Port: 80
        - Id: !Ref ELBEC22
          Port: 80

  DEVTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: DEV-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC
      Targets:
        - Id: !Ref ELBEC21
          Port: 80

  MGTTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MGT-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC
      Targets:
        - Id: !Ref ELBEC22
          Port: 80          

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ELBIGWAttachment
    Properties:
      Name: My-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref ELBSN
        - !Ref ELBSN2
      SecurityGroups:
        - !Ref MySG

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DEVTG
      Conditions:
        - Field: path-pattern
          Values:
            - /dev/*
      ListenerArn: !Ref ALBListener
      Priority: 1

  ALBListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MGTTG
      Conditions:
        - Field: path-pattern
          Values:
            - /mgt/*
      ListenerArn: !Ref ALBListener
      Priority: 2

  # NLBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref NLBTG
  #     LoadBalancerArn: !Ref NLB
  #     Port: 80
  #     Protocol: TCP

  # NLBListener2:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref NLBTG2
  #     LoadBalancerArn: !Ref NLB
  #     Port: 161
  #     Protocol: UDP      

  ELBEC21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: ELB-EC2-01
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref ELBSN
          GroupSet:
            - !Ref MySG
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname ELB-EC2-01
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>Test Web Server 1</h1>" > /var/www/html/index.html  
            mkdir /var/www/html/dev
            echo "<h1>Dev</h1>" > /var/www/html/dev/index.heml

  ELBEC22:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: ELB-EC2-02
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref ELBSN2
          GroupSet:
            - !Ref MySG
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname ELB-EC2-02
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>Test Web Server 2</h1>" > /var/www/html/index.html
            mkdir /var/www/html/mgt
            echo "<h1>Dev</h1>" > /var/www/html/mgt/index.heml
            
  MyEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d6e6a06d11d7777d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: My-EC2-02
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MySN
          GroupSet:
            - !Ref MySG2
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname My-EC2
            amazon-linux-extras install epel -y